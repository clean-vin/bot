import random
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from config import BOT_TOKEN, MANAGER_CHAT_ID, PAYPAL_LINK, CRYPTO_WALLET
from aiogram.client.default import DefaultBotProperties


bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class UserState(StatesGroup):
    choosing_language = State()
    waiting_for_vin = State()
    deleting_vin = State()
    waiting_for_payment = State()


user_language = {}


# –ö–Ω–æ–ø–∫–∏
language_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π"), KeyboardButton(text="üá∫üá∏ English")]
    ],
    resize_keyboard=True
)


menu_ru = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å VIN")],
        [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å VIN")],
        [KeyboardButton(text="üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã")],
        [KeyboardButton(text="‚ÑπÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç"), KeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")]
    ],
    resize_keyboard=True
)


menu_en = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîç Check VIN")],
        [KeyboardButton(text="‚ùå Delete VIN")],
        [KeyboardButton(text="üí≥ Payment Methods")],
        [KeyboardButton(text="‚ÑπÔ∏è How it works"), KeyboardButton(text="üìû Contact Manager")]
    ],
    resize_keyboard=True
)


def get_menu(lang):
    return menu_ru if lang == "ru" else menu_en


def vin_result_kb(lang):
    if lang == "ru":
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω VIN")],
                [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é VIN")]
            ],
            resize_keyboard=True
        )
    else:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üîÅ Check another VIN")],
                [KeyboardButton(text="‚ùå Delete VIN history")]
            ],
            resize_keyboard=True
        )


def payment_kb(lang):
    if lang == "ru":
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üí≥ Visa/Mastercard")],
                [KeyboardButton(text="üí∞ PayPal")],
                [KeyboardButton(text="ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞")]
            ],
            resize_keyboard=True
        )
    else:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üí≥ Visa/Mastercard")],
                [KeyboardButton(text="üí∞ PayPal")],
                [KeyboardButton(text="ü™ô Cryptocurrency")]
            ],
            resize_keyboard=True
        )


# –°—Ç–∞—Ä—Ç
@dp.message(F.text.in_({"/start", "start"}))
async def start(message: Message, state: FSMContext):
    await message.answer("üá∑üá∫ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / üá∫üá∏ Please select language:", reply_markup=language_kb)
    await state.set_state(UserState.choosing_language)


@dp.message(UserState.choosing_language)
async def set_language(message: Message, state: FSMContext):
    text = message.text
    if text == "üá∑üá∫ –†—É—Å—Å–∫–∏–π":
        user_language[message.from_user.id] = "ru"
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_ru)
    elif text == "üá∫üá∏ English":
        user_language[message.from_user.id] = "en"
        await message.answer("Main menu:", reply_markup=menu_en)
    await state.clear()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ VIN
@dp.message(F.text.in_({"üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å VIN", "üîç Check VIN"}))
async def ask_vin(message: Message, state: FSMContext):
    lang = user_language.get(message.from_user.id, "ru")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ 17-–∑–Ω–∞—á–Ω—ã–π VIN –∫–æ–¥:" if lang == "ru" else "Enter the 17-character VIN code:")
    await state.set_state(UserState.waiting_for_vin)


@dp.message(UserState.waiting_for_vin)
async def show_vin_report(message: Message, state: FSMContext):
    vin = message.text.upper()
    lang = user_language.get(message.from_user.id, "ru")
    description_ru = [
        "Toyota Camry 2017, —É–¥–∞—Ä –≤ –ø–µ—Ä–µ–¥–Ω—é—é —á–∞—Å—Ç—å",
        "BMW X5 2019, –±–æ–∫–æ–≤–æ–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ",
        "Ford Mustang 2020, –±–µ–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π"
    ]
    description_en = [
        "Toyota Camry 2017, front-end damage",
        "BMW X5 2019, side collision",
        "Ford Mustang 2020, no damage"
    ]
    description = random.choice(description_ru if lang == "ru" else description_en)
    report = f"<b>VIN:</b> {vin}\n<b>–ò—Å—Ç–æ—Ä–∏—è:</b> {description}\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è:</b> $30" if lang == "ru" else \
             f"<b>VIN:</b> {vin}\n<b>History:</b> {description}\n<b>Removal cost:</b> $30"
    await message.answer(report, reply_markup=vin_result_kb(lang))
    await state.clear()


# –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ VIN
@dp.message(F.text.in_({"üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω VIN", "üîÅ Check another VIN"}))
async def repeat_vin_check(message: Message, state: FSMContext):
    lang = user_language.get(message.from_user.id, "ru")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ 17-–∑–Ω–∞—á–Ω—ã–π VIN –∫–æ–¥:" if lang == "ru" else "Enter the 17-character VIN code:")
    await state.set_state(UserState.waiting_for_vin)


# –£–¥–∞–ª–µ–Ω–∏–µ VIN
@dp.message(F.text.in_({"‚ùå –£–¥–∞–ª–∏—Ç—å VIN", "‚ùå Delete VIN", "‚ùå –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é VIN", "‚ùå Delete VIN history"}))
async def ask_delete_vin(message: Message, state: FSMContext):
    lang = user_language.get(message.from_user.id, "ru")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ VIN, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:" if lang == "ru" else "Enter the VIN you want to delete:")
    await state.set_state(UserState.deleting_vin)


@dp.message(UserState.deleting_vin)
async def handle_delete_vin(message: Message, state: FSMContext):
    vin = message.text.upper()
    lang = user_language.get(message.from_user.id, "ru")
    description_ru = [
        "Toyota Camry 2017, —É–¥–∞—Ä –≤ –ø–µ—Ä–µ–¥–Ω—é—é —á–∞—Å—Ç—å",
        "BMW X5 2019, –±–æ–∫–æ–≤–æ–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ",
        "Ford Mustang 2020, –±–µ–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π"
    ]
    description_en = [
        "Toyota Camry 2017, front-end damage",
        "BMW X5 2019, side collision",
        "Ford Mustang 2020, no damage"
    ]
    description = random.choice(description_ru if lang == "ru" else description_en)
    report = f"<b>VIN:</b> {vin}\n<b>–ò—Å—Ç–æ—Ä–∏—è:</b> {description}\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è:</b> $30" if lang == "ru" else \
             f"<b>VIN:</b> {vin}\n<b>History:</b> {description}\n<b>Removal cost:</b> $30"
    await message.answer(report)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:" if lang == "ru" else "Choose a payment method:", reply_markup=payment_kb(lang))
    await state.update_data(vin=vin)
    await state.set_state(UserState.waiting_for_payment)


# –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
@dp.message(F.text.in_({"üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã", "üí≥ Payment Methods"}))
async def payment_methods(message: Message):
    lang = user_language.get(message.from_user.id, "ru")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:" if lang == "ru" else "Choose a payment method:", reply_markup=payment_kb(lang))


# –û–ø–ª–∞—Ç–∞
@dp.message(F.text.in_({"üí≥ Visa/Mastercard", "üí∞ PayPal"}))
async def pay_with_paypal(message: Message, state: FSMContext):
    lang = user_language.get(message.from_user.id, "ru")
    await message.answer(
        f"{'–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:' if lang == 'ru' else 'Pay via link:'}\n{PAYPAL_LINK}\n\n"
        f"{'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.' if lang == 'ru' else 'Please attach a photo of the receipt after payment.'}"
    )
    await state.set_state(UserState.waiting_for_payment)


@dp.message(F.text.in_({"ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", "ü™ô Cryptocurrency"}))
async def crypto(message: Message, state: FSMContext):
    lang = user_language.get(message.from_user.id, "ru")
    await message.answer(
        f"{'–û—Ç–ø—Ä–∞–≤—å—Ç–µ $30 –Ω–∞ –∫–æ—à–µ–ª–µ–∫:' if lang == 'ru' else 'Send $30 to the wallet:'}\n"
        f"<code>{CRYPTO_WALLET}</code>\n\n"
        f"{'–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.' if lang == 'ru' else 'After payment, attach a receipt photo.'}"
    )
    await state.set_state(UserState.waiting_for_payment)


@dp.message(F.photo, UserState.waiting_for_payment)
async def receive_receipt(message: Message, state: FSMContext):
    data = await state.get_data()
    vin = data.get("vin", "–Ω–µ —É–∫–∞–∑–∞–Ω")
    user = message.from_user
    caption = f"üì• –ù–æ–≤—ã–π —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username} ({user.full_name})\nVIN: {vin}"
    await bot.send_photo(chat_id=MANAGER_CHAT_ID, photo=message.photo[-1].file_id, caption=caption)


    lang = user_language.get(message.from_user.id, "ru")
    await message.answer(
        "–ß–µ–∫ –ø–æ–ª—É—á–µ–Ω, —Å–ø–∞—Å–∏–±–æ! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤." if lang == "ru"
        else "Receipt received, thank you! The manager will contact you within 24 hours.",
        reply_markup=get_menu(lang)
    )
    await state.clear()


# –ú–µ–Ω–µ–¥–∂–µ—Ä –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
@dp.message(F.text.in_({"üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", "üìû Contact Manager"}))
async def contact_manager(message: Message):
    lang = user_language.get(message.from_user.id, "ru")
    text = (
         " –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: @rm_vin\n"
          if lang == "ru" else
          " Please contact support assistant: @rm_vin\n"
          )
    await message.answer(text)

@dp.message(F.text.in_({"‚ÑπÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç", "‚ÑπÔ∏è How it works"}))
async def how_it_works(message: Message):
    lang = user_language.get(message.from_user.id, "ru")
    text = (
        "üöó <b>–í–≤–µ–¥–∏—Ç–µ VIN –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ</b>\n"
        "üìÑ <b>–ü–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n"
        "üí≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ VIN</b>\n"
        "‚è±Ô∏è <b>–ß–µ—Ä–µ–∑ 24 —á–∞—Å–∞ –∏—Å—Ç–æ—Ä–∏—è VIN –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω–∞</b>"
        if lang == "ru" else
        "üöó <b>Enter your car VIN</b>\n"
        "üìÑ <b>Get full auction report</b>\n"
        "üí≥ <b>Select payment type and confirm VIN removal</b>\n"
        "‚è±Ô∏è <b>Within 24 hours, unwanted info will be deleted</b>"
    )
    await message.answer(text)


# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))