import os
import asyncio
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher
from aiogram.types import Update
from aiogram.enums import ParseMode
from aiogram.client.session.aiohttp import AiohttpSession

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ URL
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ù–∞–ø—Ä–∏–º–µ—Ä: https://your-app-name.onrender.com/webhook

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
session = AiohttpSession()
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML, session=session)
dp = Dispatcher()

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI()

# –†–æ—É—Ç –¥–ª—è Telegram –≤–µ–±—Ö—É–∫–∞
@app.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
        update = Update.model_validate(data)
        await dp.feed_update(bot, update)
        return {"ok": True}
    except Exception as e:
        return {"error": str(e)}

# –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@dp.message()
async def handle_message(message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç —Å Render! üöÄ")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@app.on_event("startup")
async def on_startup():
    if WEBHOOK_URL:
        await bot.set_webhook(WEBHOOK_URL)
        print(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    else:
        print("‚ö†Ô∏è WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω")
    print("üöÄ Bot is running")

@app.on_event("shutdown")
async def on_shutdown():
    await bot.session.close()
