import os
import asyncio
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher
from aiogram.types import Update
from aiogram.enums import ParseMode
from aiogram.client.session.aiohttp import AiohttpSession

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ Render ‚Üí Environment)
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
session = AiohttpSession()
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML, session=session)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI()

# –†–æ—É—Ç–∏–Ω–≥ –≤–µ–±—Ö—É–∫–∞
@app.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
        update = Update.model_validate(data)
        await dp.feed_update(bot, update)
        return {"ok": True}
    except Exception as e:
        return {"error": str(e)}

# –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message()
async def handle_message(message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–±–æ—Ç–∞—é —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫ –Ω–∞ Render üòä")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–ø—É—Å–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞ Render, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ)
@app.on_event("startup")
async def on_startup():
    print("üöÄ Bot is running")

@app.on_event("shutdown")
async def on_shutdown():
    await bot.session.close()
